#!/bin/bash
set -ex

PYTHON_VERSION=$(python -c 'import sys; print(sys.version_info[0])' | tr -d "'")
if [ "$PYTHON_VERSION" -eq 2 ]
then
  exit 0
fi
HOME_DIR=/test/benchmark
BIN_DIR=${HOME_DIR}/bin
LOG_DIR=${HOME_DIR}/logs

rm -rf $BIN_DIR/pytorch
git clone https://github.com/pytorch/pytorch.git --branch v2.0.0 --single-branch --depth 1  $BIN_DIR/pytorch

pip install -U numpy
pip install gitpython
pip install tabulate==0.9.0

ls -l ${HOME_DIR}

INFERENCE_LOG=${LOG_DIR}/pytorch_inductor_torchbench_benchmark.log

# install torchdata and torchtext before installing torchbench
#git clone --branch v0.6.0 https://github.com/pytorch/data.git $BIN_DIR/pytorch/torchdata
#cd $BIN_DIR/pytorch/data
#pip install .
#
#git clone https://github.com/pytorch/text $BIN_DIR/pytorch/torchtext 
#cd $BIN_DIR/pytorch/torchtext
#git submodule update --init --recursive
#FORCE_CUDA=1 python setup.py clean install

git clone https://github.com/pytorch/benchmark $BIN_DIR/benchmark
cd $BIN_DIR/benchmark
python install.py

INFERENCE_LOG=${LOG_DIR}/pytorch_inductor_torchbench_benchmark.log

cd $BIN_DIR/pytorch
mkdir -p $BIN_DIR/pytorch/torchbench_logs

python benchmarks/dynamo/runner.py --inference --suites=torchbench --dtypes=float32 --compilers=inductor --output-dir=torchbench_logs --extra-args='--output-directory=./' --device cuda --quick #> $INFERENCE_LOG 2>&1

RETURN_VAL=`echo $?`
set -e

if [ ${RETURN_VAL} -eq 0 ]; then
    echo "Training Torchbench Complete using PyTorch Inductor."
else
    echo "Training Torchbench Failed using PyTorch Inductor."
    #cat $INFERENCE_LOG
    exit 1
fi

python /test/bin/benchmark/read_upload_benchmarking_results.py -dir $BIN_DIR/pytorch/torchbench_logs \
       -model_suite torchbench -precision float32 -workload Inference

exit 0
